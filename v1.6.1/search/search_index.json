{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"jmenu","text":"<p>Command line tool for fetching University of Oulu restaurant menus from the Jamix API.</p> <p>Doubles as a general library for fetching menu info from Jamix.</p>"},{"location":"#installing","title":"Installing","text":""},{"location":"#python-package-index","title":"Python Package Index","text":"<p>jmenu is available for install on the python package index.</p> <pre><code>pip install jmenu\n</code></pre>"},{"location":"#building-from-source","title":"Building from source","text":"<p>For testing purposes, the package can be built from the repository source code.</p> <pre><code>pip install build\npython3 -m build\npip install dist/&lt;package_name&gt;.whl\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#command-line-tool","title":"Command line tool","text":"<p>jmenu can be invoked from the command line as is:</p> <pre><code>jmenu [-h] [-v] [-e] [-t] [-l {fi,en}] [-a markers [G, VEG ...]]\n</code></pre> <p>All flags and parameters described below</p> Argument Example Description -a, --allergens g veg Highlights appropriately marked results Flag Description -h, --help Display usage information -v, --version Display version information -e, --explain Display allergen marker information -t, --tomorrow Fetch menu results for tomorrow -l, --language Result language, opts: {fi, en}"},{"location":"#python-library","title":"Python library","text":"<p>jmenu can also be imported as a library:</p> <pre><code>from jmenu import main\n\nmain.run()\n</code></pre> <p>Documentation for the library can be found in the project pages.</p>"},{"location":"#contributing","title":"Contributing","text":"<p>Pull requests are welcome. We use pre-commit hooks and GitHub actions to ensure code quality.</p>"},{"location":"#development-environment-setup","title":"Development environment setup","text":"<p>Requirements</p> <ul> <li>Python 3.10+</li> <li>Virtualenv</li> </ul> <p>Setup the development environment with</p> <pre><code>python3 -m virtualenv env\nsource env/bin/activate\npip install -r requirements.txt\n</code></pre>"},{"location":"#testing","title":"Testing","text":"<p>Run the tool</p> <pre><code>python3 -m src.jmenu.main\n</code></pre> <p>Execute unit tests</p> <pre><code>pytest\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":"<p>Documentation for the project is available in the project pages.</p>"},{"location":"#build-documentation-from-source","title":"Build documentation from source","text":"<p>The documentation for the modules is built with Mkdocs. and the mkdocstrings extension, using google style docstrings.</p> <p>You can build it from source by installing mkdocs</p> <pre><code>pip install mkdocs mkdocs-material\nmkdocs serve\n</code></pre> <p>and navigating to localhost:8000 in your browser.</p>"},{"location":"modules/api/","title":"jmenu.api","text":"<p>Contains functions used to wrangle the JAMIX API. This file can be imported and exposes the following functions:</p> <pre><code>* fetch_restaurant\n* parse_items\n</code></pre> <p>The following constants are also exposed:</p> <pre><code>* API_URL\n</code></pre>"},{"location":"modules/api/#src.jmenu.api.fetch_restaurant_items","title":"<code>fetch_restaurant_items(rest, fetch_date, lang_code)</code>","text":"<p>Return a list of MenuItems for specified Restaurant</p> <p>Parameters:</p> Name Type Description Default <code>rest</code> <code>Restaurant</code> <p>dataclass containing relevant restaurant information</p> required <code>fetch_date</code> <code>datetime</code> <p>datetime object used to fetch the date specified menu</p> required <code>lang_code</code> <code>str</code> <p>determines the language of the response currently supports codes 'fi' and 'en'</p> required <p>Returns:</p> Type Description <code>list[MenuItem]</code> <p>parsed response content</p> Source code in <code>src/jmenu/api.py</code> <pre><code>def fetch_restaurant_items(\n    rest: Restaurant,\n    fetch_date: datetime,\n    lang_code: str,\n) -&gt; list[MenuItem]:\n    \"\"\"Return a list of MenuItems for specified Restaurant\n\n    Parameters:\n        rest (Restaurant):\n            dataclass containing relevant restaurant information\n        fetch_date (datetime):\n            datetime object used to fetch the date specified menu\n        lang_code (str):\n            determines the language of the response\n            currently supports codes 'fi' and 'en'\n\n    Returns:\n        (list[MenuItem]):\n            parsed response content\n    \"\"\"\n    response = requests.get(\n        f\"{API_URL}/{rest.client_id}/{rest.kitchen_id}?lang={lang_code}&amp;date={fetch_date.strftime('%Y%m%d')}\",\n        timeout=5,\n    )\n    data = response.json()\n    return _parse_items(data, rest.relevant_menus)\n</code></pre>"},{"location":"modules/classes/","title":"jmenu.classes","text":"<p>Contains dataclasses jmenu uses to manage data. This file can be imported and exposes the following classes:</p> <pre><code>* MenuItem\n* Restaurant\n* Marker\n</code></pre> <p>The following collections are use-case specific to the University of Oulu:</p> <pre><code>* MARKERS\n* RESTAURANTS\n* SKIPPED_ITEMS\n</code></pre>"},{"location":"modules/classes/#src.jmenu.classes.Marker","title":"<code>Marker</code>","text":"<p>             Bases: <code>NamedTuple</code></p> <p>Dataclass for allergen information markings</p> <p>Attributes:</p> Name Type Description <code>letters</code> <code>str</code> <p>allergen markings</p> <code>explanation</code> <code>dict</code> <p>extended information about the marker, in lang_code: explanation pairs.</p> <p>Methods:</p> Name Description <code>get_explanation</code> <p>str): returns the explanation string for this Marker. Defaults to english.</p> Source code in <code>src/jmenu/classes.py</code> <pre><code>class Marker(NamedTuple):\n    \"\"\"Dataclass for allergen information markings\n\n    Attributes:\n        letters (str):\n            allergen markings\n        explanation (dict):\n            extended information about the marker, in lang_code: explanation pairs.\n\n\n    Methods:\n        get_explanation(lang: str): returns the explanation string for this Marker. Defaults to english.\n    \"\"\"\n\n    letters: str\n    explanation: Mapping\n\n    def get_explanation(self, lang_code: str = \"en\"):\n        \"Returns the explanation in the language specified by lang_code. Defaults to english.\"\n        exp = self.explanation.get(lang_code)\n        return exp if exp is not None else f\"No explanation available for '{lang_code}'\"\n</code></pre>"},{"location":"modules/classes/#src.jmenu.classes.Marker.get_explanation","title":"<code>get_explanation(lang_code='en')</code>","text":"<p>Returns the explanation in the language specified by lang_code. Defaults to english.</p> Source code in <code>src/jmenu/classes.py</code> <pre><code>def get_explanation(self, lang_code: str = \"en\"):\n    \"Returns the explanation in the language specified by lang_code. Defaults to english.\"\n    exp = self.explanation.get(lang_code)\n    return exp if exp is not None else f\"No explanation available for '{lang_code}'\"\n</code></pre>"},{"location":"modules/classes/#src.jmenu.classes.MenuItem","title":"<code>MenuItem</code>","text":"<p>             Bases: <code>NamedTuple</code></p> <p>Dataclass for single menu items and their properties</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>name of the dish</p> <code>diets</code> <code>[str]</code> <p>list of allergen markers</p> <p>Methods:</p> Name Description <code>diets_to_string</code> <p>returns the list of diets as a joined string.</p> Source code in <code>src/jmenu/classes.py</code> <pre><code>class MenuItem(NamedTuple):\n    \"\"\"Dataclass for single menu items and their properties\n\n    Attributes:\n        name (str):\n            name of the dish\n        diets ([str]):\n            list of allergen markers\n\n    Methods:\n        diets_to_string: returns the list of diets as a joined string.\n    \"\"\"\n\n    name: str\n    diets: Iterable[str]\n\n    def diets_to_string(self) -&gt; str:\n        \"\"\"Returns the diets associated with this MenuItem as spaced string.\"\"\"\n        return \" \".join(self.diets)\n</code></pre>"},{"location":"modules/classes/#src.jmenu.classes.MenuItem.diets_to_string","title":"<code>diets_to_string()</code>","text":"<p>Returns the diets associated with this MenuItem as spaced string.</p> Source code in <code>src/jmenu/classes.py</code> <pre><code>def diets_to_string(self) -&gt; str:\n    \"\"\"Returns the diets associated with this MenuItem as spaced string.\"\"\"\n    return \" \".join(self.diets)\n</code></pre>"},{"location":"modules/classes/#src.jmenu.classes.Restaurant","title":"<code>Restaurant</code>","text":"<p>             Bases: <code>NamedTuple</code></p> <p>Dataclass for relevant restaurant information</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>name of the restaurant</p> <code>client_id</code> <code>int</code> <p>internal jamix identifier used for restaurant providers</p> <code>kitchen_id</code> <code>int</code> <p>internal jamix identifier used to assign menu content</p> <code>menu_type</code> <code>int</code> <p>internal jamix identifier used to classify menus based on content</p> <code>relevant_menus</code> <code>[str]</code> <p>menu names used for filtering out desserts etc.</p> Source code in <code>src/jmenu/classes.py</code> <pre><code>class Restaurant(NamedTuple):\n    \"\"\"Dataclass for relevant restaurant information\n\n    Attributes:\n        name (str):\n            name of the restaurant\n        client_id (int):\n            internal jamix identifier used for restaurant providers\n        kitchen_id (int):\n            internal jamix identifier used to assign menu content\n        menu_type (int):\n            internal jamix identifier used to classify menus based on content\n        relevant_menus ([str]):\n            menu names used for filtering out desserts etc.\n    \"\"\"\n\n    name: str\n    client_id: int\n    kitchen_id: int\n    menu_type: int\n    relevant_menus: Iterable[str]\n</code></pre>"},{"location":"modules/main/","title":"jmenu.main","text":"<p>This file contains the logic for executing jmenu from the command line. This file can be imported and exposes the following functions:</p> <pre><code>* run\n* get_version\n</code></pre>"},{"location":"modules/main/#src.jmenu.main.get_version","title":"<code>get_version()</code>","text":"<p>Returns the application build version</p> <p>version data is pulled by importlib.metadata.version, defaults to 'development build' if it is not somehow present</p> <p>Returns:</p> Name Type Description <code>version</code> <code>str</code> <p>semantic versioning string</p> Source code in <code>src/jmenu/main.py</code> <pre><code>def get_version() -&gt; str:\n    \"\"\"Returns the application build version\n\n    version data is pulled by importlib.metadata.version,\n    defaults to 'development build' if it is not somehow present\n\n    Returns:\n        version (str):\n            semantic versioning string\n    \"\"\"\n    try:\n        return version(\"jmenu\")\n    except PackageNotFoundError:\n        return \"development build\"\n</code></pre>"},{"location":"modules/main/#src.jmenu.main.run","title":"<code>run()</code>","text":"<p>Fetch and print restaurant menus</p> <p>Returns:</p> Name Type Description <code>success</code> <code>bool</code> <p>returns True if any errors were encountered, returns False otherwise</p> Source code in <code>src/jmenu/main.py</code> <pre><code>def run():\n    \"\"\"Fetch and print restaurant menus\n\n    Returns:\n        success (bool):\n            returns True if any errors were encountered,\n            returns False otherwise\n    \"\"\"\n    try:\n        args = _get_args()\n        if args.explain:\n            _print_explanations(args.lang_code)\n            return 0\n        start = time.time()\n        encountered_error = _print_menu(args)\n        print(\"Process took {:.2f} seconds.\".format(time.time() - start))\n        return encountered_error\n    except KeyboardInterrupt:\n        return True\n</code></pre>"}]}